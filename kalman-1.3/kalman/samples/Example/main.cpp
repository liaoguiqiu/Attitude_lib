#include <cstdlib>
#include <iostream>
#include <fstream>

#include <cmath>
#include <vector>
#include "data.h"
#include "schedu.h"

// Example of Extented Kalman Filter
#include "plane.h"
#include "csv.h"
#include "schedu.h"

using namespace std;
using namespace Kalman;
 

int main() {

	

	data.read();
	loop.main_loop();








	ifstream dataInput;
	ofstream dataOutput;
	std::string tmpStr;

	const unsigned NTRY = 500;
	const unsigned n = 4;	//nb states
	const unsigned m = 2;	//nb measures

	// Matlab format
	selectKVectorContext(createKVectorContext(" ", "[ ", " ];", 4));
	selectKMatrixContext(createKMatrixContext(" ", " ;\n  ", "[ ", " ];", 4));

	cPlaneEKF filter;

	static const double _P0[] = {100.0*100.0, 0.0, 0.0, 0.0,
								 0.0, 10.0*10.0, 0.0, 0.0,
								 0.0, 0.0, 25.0*25.0, 0.0,
								 0.0, 0.0, 0.0, 10.0*10.0}; 

	Vector x(n);
	Matrix P0(n, n, _P0);

	Vector F(NTRY);
	Matrix Measure(m,NTRY);

	dataInput.open("../Matlab/data.m",ifstream::in);
	dataOutput.open("../Matlab/trajectory_udu_load.m", ofstream::out | ofstream::trunc);

	if (dataInput.fail())
	{
		cout<<"Unable to open input file!"<<endl;
		return 0;
	}

	if (dataOutput.fail())
	{
		cout<<"Unable to open output file!"<<endl;
		return 0;
	}

	cout<<"Loading inputs and measures from file <data.m>."<<endl;

	//Read the inputs vector. This vector have been generated by the Matlab script <generation.m>
	dataInput>>tmpStr;
	dataInput>>tmpStr;
	dataInput>>F;

	if (dataInput.fail())
	{
		cout<<"IO error!"<<endl;
		return 0;
	}

	//Output as a Matlab colonn vector.  This will be used by the Matlab script <result.m>
	selectKVectorContext(createKVectorContext(";", "[ ", " ];", 4));


	//Read the measures matrix. This matrix have been generated by the Matlab script <generation.m>
	dataInput>>tmpStr;
	dataInput>>tmpStr;
	dataInput>>tmpStr;
	dataInput>>Measure;

	if (dataInput.fail())
	{
		cout<<"IO error!"<<endl;
		return 0;
	}




	/*--±£´æµ½/Matlab/trajectory_udu_load.m----*/
	for (int i = 1; i < data.len-8; i++)
	{



		dataOutput << "anglex(" << " " << i << ") = " << data.angle.x[i] << ";" << endl;
		dataOutput << "angley(" << " " << i << ") = " << data.angle.y[i] << ";" << endl;
		dataOutput << "anglez(" << " " << i << ") = " << data.angle.z[i] << ";" << endl;

		dataOutput << "anx(" << " " << i << ") = " << data_filed.angle.x[i] << ";" << endl;
		dataOutput << "any(" << " " << i << ") = " << data_filed.angle.y[i] << ";" << endl;
		dataOutput << "anz(" << " " << i << ") = " << data_filed.angle.z[i] << ";" << endl;

	}

	dataOutput.close();
	dataInput.close();

	return EXIT_SUCCESS;
}
